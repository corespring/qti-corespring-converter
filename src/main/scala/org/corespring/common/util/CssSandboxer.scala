package org.corespring.common.util

import java.io.StringWriter

import com.phloc.commons.charset.CCharset
import com.phloc.css.ECSSVersion
import com.phloc.css.decl._
import com.phloc.css.reader.CSSReader
import com.phloc.css.writer._

import scala.collection.convert.ImplicitConversions.{`collection AsScalaIterable`, `list asScalaBuffer`}


object CssSandboxer {

  private val charset = CCharset.CHARSET_UTF_8_OBJ
  private val cssVersion = ECSSVersion.CSS30

  /**
   * Sandboxes CSS to a particular selector by prepending it to each rule in a CSS string.
   */
  def sandbox(css: String, selector: String): String = try {
    val rules: Seq[ICSSTopLevelRule] = CSSReader.readFromString(css, charset, cssVersion).getAllRules.toSeq
    val amendedRules: Seq[ICSSTopLevelRule] = rules.map(rule => rule match {
      case styleRule: CSSStyleRule => appendSelector(selector, styleRule)
      case mediaRule: CSSMediaRule => {
        val newMediaRule = new CSSMediaRule()
        mediaRule.getAllMediaQueries.foreach(newMediaRule.addMediaQuery(_))
        mediaRule.getAllRules.foreach(rule => rule match {
          case styleRule: CSSStyleRule => newMediaRule.addRule(appendSelector(selector, styleRule))
          case _ => throw new Exception("Unsupported!")
        })
        newMediaRule
      }
      case _ => rule
    })
    val newCss = new CascadingStyleSheet()
    val output = new StringWriter()

    amendedRules.foreach(newCss.addRule(_))
    val writer = new CSSWriter(new CSSWriterSettings(cssVersion, false))
    writer.writeCSS(newCss, output)
    format(output.toString)
  } catch {
    case e: Exception => {
      println(css)
      throw e
    }
  }

  private def appendSelector(selector: String, rule: CSSStyleRule): CSSStyleRule = {
    val newMember = new CSSSelectorSimpleMember(s"$selector ")
    val newSelectors = rule.getAllSelectors.map(selector => {
      val newSelector = new CSSSelector()
      (newMember +: selector.getAllMembers).foreach(newSelector.addMember(_))
      newSelector
    })
    val newRule = new CSSStyleRule()
    rule.getAllDeclarations.foreach(newRule.addDeclaration(_))
    newSelectors.foreach(newRule.addSelector(_))
    newRule
  }

  /**
   * The CSS library prepends an "autogenerated" comment warning. Strip this out. Also take out all newlines.
   */
  private def format(css: String): String = {
    val commentR = """(?s)\/\*.*\*\/\s(.*)""".r
    (css match {
      case commentR(body) => body
      case _ => css
    }).replaceAllLiterally("\n", " ").replaceAll("( )+", " ").trim
  }

}
